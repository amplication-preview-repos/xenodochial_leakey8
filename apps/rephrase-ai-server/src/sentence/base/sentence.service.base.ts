/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Sentence as PrismaSentence } from "@prisma/client";

export class SentenceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SentenceCountArgs, "select">): Promise<number> {
    return this.prisma.sentence.count(args);
  }

  async sentences(
    args: Prisma.SentenceFindManyArgs
  ): Promise<PrismaSentence[]> {
    return this.prisma.sentence.findMany(args);
  }
  async sentence(
    args: Prisma.SentenceFindUniqueArgs
  ): Promise<PrismaSentence | null> {
    return this.prisma.sentence.findUnique(args);
  }
  async createSentence(
    args: Prisma.SentenceCreateArgs
  ): Promise<PrismaSentence> {
    return this.prisma.sentence.create(args);
  }
  async updateSentence(
    args: Prisma.SentenceUpdateArgs
  ): Promise<PrismaSentence> {
    return this.prisma.sentence.update(args);
  }
  async deleteSentence(
    args: Prisma.SentenceDeleteArgs
  ): Promise<PrismaSentence> {
    return this.prisma.sentence.delete(args);
  }
}
