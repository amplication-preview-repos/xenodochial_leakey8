/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SentenceService } from "../sentence.service";
import { SentenceCreateInput } from "./SentenceCreateInput";
import { Sentence } from "./Sentence";
import { SentenceFindManyArgs } from "./SentenceFindManyArgs";
import { SentenceWhereUniqueInput } from "./SentenceWhereUniqueInput";
import { SentenceUpdateInput } from "./SentenceUpdateInput";

export class SentenceControllerBase {
  constructor(protected readonly service: SentenceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sentence })
  async createSentence(
    @common.Body() data: SentenceCreateInput
  ): Promise<Sentence> {
    return await this.service.createSentence({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        originalText: true,
        rephrasedText: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Sentence] })
  @ApiNestedQuery(SentenceFindManyArgs)
  async sentences(@common.Req() request: Request): Promise<Sentence[]> {
    const args = plainToClass(SentenceFindManyArgs, request.query);
    return this.service.sentences({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        originalText: true,
        rephrasedText: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sentence })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sentence(
    @common.Param() params: SentenceWhereUniqueInput
  ): Promise<Sentence | null> {
    const result = await this.service.sentence({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        originalText: true,
        rephrasedText: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sentence })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSentence(
    @common.Param() params: SentenceWhereUniqueInput,
    @common.Body() data: SentenceUpdateInput
  ): Promise<Sentence | null> {
    try {
      return await this.service.updateSentence({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          originalText: true,
          rephrasedText: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sentence })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSentence(
    @common.Param() params: SentenceWhereUniqueInput
  ): Promise<Sentence | null> {
    try {
      return await this.service.deleteSentence({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          originalText: true,
          rephrasedText: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
