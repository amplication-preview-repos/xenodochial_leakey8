/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Sentence } from "./Sentence";
import { SentenceCountArgs } from "./SentenceCountArgs";
import { SentenceFindManyArgs } from "./SentenceFindManyArgs";
import { SentenceFindUniqueArgs } from "./SentenceFindUniqueArgs";
import { CreateSentenceArgs } from "./CreateSentenceArgs";
import { UpdateSentenceArgs } from "./UpdateSentenceArgs";
import { DeleteSentenceArgs } from "./DeleteSentenceArgs";
import { SentenceService } from "../sentence.service";
@graphql.Resolver(() => Sentence)
export class SentenceResolverBase {
  constructor(protected readonly service: SentenceService) {}

  async _sentencesMeta(
    @graphql.Args() args: SentenceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Sentence])
  async sentences(
    @graphql.Args() args: SentenceFindManyArgs
  ): Promise<Sentence[]> {
    return this.service.sentences(args);
  }

  @graphql.Query(() => Sentence, { nullable: true })
  async sentence(
    @graphql.Args() args: SentenceFindUniqueArgs
  ): Promise<Sentence | null> {
    const result = await this.service.sentence(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Sentence)
  async createSentence(
    @graphql.Args() args: CreateSentenceArgs
  ): Promise<Sentence> {
    return await this.service.createSentence({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Sentence)
  async updateSentence(
    @graphql.Args() args: UpdateSentenceArgs
  ): Promise<Sentence | null> {
    try {
      return await this.service.updateSentence({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sentence)
  async deleteSentence(
    @graphql.Args() args: DeleteSentenceArgs
  ): Promise<Sentence | null> {
    try {
      return await this.service.deleteSentence(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
